import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static int N, M, cnt;
	static int[][] map;
	static boolean[][] visit;
	static int[] cost, dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		visit = new boolean[N][M];
		cost = new int[N * M]; //그림별 크기 저장 배열
		for (int i = 0; i < N; i++) {
			 st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 1 && !visit[i][j]) {
					dfs(i, j);
					cnt++; // 그림 갯수 카운트
				}
			}
		}
		Arrays.sort(cost); // 소팅을 통해 가장 큰 값을 젤뒤로 보냄
		System.out.println(cnt); // 지금까지 그림 갯수
		System.out.println(cost[N*M-1]); // 젤 마지막값 출력
	}

	private static void dfs(int y, int x) {
		visit[y][x] = true;
		cost[cnt]++;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i]; // 배열범위 벗어나거나, 방문했거나, map 값이 1이면 다음으로
			if(ny<0 || nx <0|| ny>=N || nx >= M || visit[ny][nx] || map[ny][nx] == 0) continue;
			dfs(ny,nx);
		}
	}
}
