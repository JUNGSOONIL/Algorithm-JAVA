import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N, ans = Integer.MAX_VALUE;
	static int[] popu;
	static int[][] map;
	static boolean[] visit;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		popu = new int[N+1];
		visit = new boolean[N+1];
		map = new int[N+1][N+1];
		StringTokenizer st = new StringTokenizer(br.readLine());
		for (int i = 1; i <= N; i++) {
			popu[i] = Integer.parseInt(st.nextToken());
		}
		for (int i = 1; i <=N; i++) {
			 st = new StringTokenizer(br.readLine());
			int end = Integer.parseInt(st.nextToken());
			for (int j = 0; j <end; j++) {
				int next = Integer.parseInt(st.nextToken());
				map[i][next] = map[next][i] = 1;
			}
		}
		subset(1);
		if(ans == Integer.MAX_VALUE)
			System.out.println(-1);
		else 
			System.out.println(ans);
	}
	
	private static boolean check(ArrayList<Integer> a) {
		boolean[]select = new boolean[N+1];
		Queue<Integer> q = new LinkedList<Integer>();
		select[a.get(0)] = true;
		q.offer(a.get(0));
		int count = 1;
		while(!q.isEmpty()) {
			int n = q.poll();
			for (int i = 1; i <= N; i++) {
				if(map[n][i] == 0 || select[i] || !a.contains(i)) continue;
				q.offer(i);
				select[i] = true;
				count++;
			}
		}
		if(count == a.size())
			return true;
		return false;
	}
	
	private static void subset(int index) {
		if(index == N+1) {
			ArrayList<Integer> A = new ArrayList<>();
			ArrayList<Integer> B = new ArrayList<>();
			for (int i = 1; i <=N; i++) {
				if(!visit[i])
					A.add(i);
				else
					B.add(i);
			}
			if(A.size() != 0 && B.size() !=0)
				if(check(A) && check(B))
					cal(A,B);
			return;
		}
		visit[index] = true;
		subset(index+1);
		visit[index] = false;
		subset(index+1);
	}

	private static void cal(ArrayList<Integer> a, ArrayList<Integer> b) {
		int asum = 0, bsum = 0;
		for (int i = 0; i < a.size(); i++) {
			asum+= popu[a.get(i)];
		}
		for (int i = 0; i < b.size(); i++) {
			bsum+= popu[b.get(i)];
		}
		ans = Math.min(Math.abs(asum-bsum), ans);
	}
}
