import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N, M, ans;
	static int[][] map;
	static boolean[][] visit;
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };
	static Queue<Node> q = new LinkedList<>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		int cnt = 0;
		while (true) {
			cnt = count(); // 빙산이 몇뎡어리인지 카운트
			if(cnt >= 2)// 빙산이 두덩어리 이상으로 나누어짐
				break;
			if(cnt == 0) { // 빙산이 다 녹음 위에서 안걸러졌으니깐 결과 0 초기화
				ans = 0;
				break;
			}
			check(); // 빙산 녹이기
			ans++;  // 시간 증가
		}
		System.out.println(ans);
	}

	private static void check() {
		visit = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[i][j] != 0) {
					q.offer(new Node(i,j));
					visit[i][j] = true;
				}
			}
		}
		bfs(); // bfs를 통해 빙산들을 녹여준다.
	}

	private static void bfs() {
		while(!q.isEmpty()) {
			Node n = q.poll();
			int cnt = 0;
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny<0||nx<0||ny>=N||nx>=M||map[ny][nx]!=0||visit[ny][nx])
					continue; // 방문체크하는 이유가 해당 방문지점이 0으로 수정되었을경우도 있기때문에 체크해줘야함
				cnt++;
			}
			if(map[n.y][n.x] - cnt < 0)
				map[n.y][n.x] = 0;
			else
				map[n.y][n.x] = map[n.y][n.x] - cnt;
		}
		
	}

	private static int count() {
		visit = new boolean[N][M];
		int cnt = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] != 0 && !visit[i][j]) {
					dfs(i, j); // DFS 방식을 통해 총 몇개의 빙하로 나누어졌는지 확인
					cnt++;
				}
			}
		}
		return cnt;
	}

	private static void dfs(int y, int x) {
		visit[y][x] = true;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if(ny<0||nx<0||ny>=N||nx>=M||map[ny][nx]==0||visit[ny][nx])
				continue;
			dfs(ny,nx);
		}
		
	}

	static class Node {
		int y, x;

		Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
}
