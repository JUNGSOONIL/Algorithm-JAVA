import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N, M, K, dy[] = { -1, 1, 0, 0 }, dx[] = { 0, 0, -1, 1 };
	static char[][] map;
	static boolean[][][] visit;
	static Queue<Node> q = new LinkedList<>();
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new char[N][M];
		visit = new boolean[N][M][K+1];
		for (int i = 0; i < N; i++) {
			map[i] = br.readLine().toCharArray();
		}
		visit[0][0][0] = true;
		q.offer(new Node(0, 0, 1, 0));
		bfs();
	}

	private static void bfs() {
		while (!q.isEmpty()) {
			Node n = q.poll();
			if (n.y == N - 1 && n.x == M - 1) { //도착 했으면 현재 카운트를 출력함
				System.out.println(n.cnt);
				return;
			}
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if (ny < 0 || nx < 0 || ny >= N || nx >= M) //배열 범위 벗어나면 멈춤
					continue; 
				if (map[ny][nx] == '0' ) { // 이동 할 수 있는 곳
					if(!visit[ny][nx][n.wall]) { // 방문 안했으면 방문하고 큐에 넣어줌
						visit[ny][nx][n.wall] = true;
						q.offer(new Node(ny,nx,n.cnt+1,n.wall));
					}
				} else { // 벽인 경우
					 if(n.wall <K && !visit[ny][nx][n.wall+1]) { // 벽을 부술수 있고 방문 안했으면 큐에 넣어줌
						 visit[ny][nx][n.wall+1] = true;
						 q.offer(new Node(ny,nx,n.cnt+1,n.wall+1));
                     }
				}
			}
		}
		System.out.println(-1);
	}

	static class Node {
		int y, x, cnt, wall; // 좌표, 카운트, 벽 부순 횟수
		Node(int y, int x, int cnt, int wall) {
			this.y = y;
			this.x = x;
			this.cnt = cnt;
			this.wall = wall;
		}
	}
}
