import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static int V, E;
	static long ans;
	static Edge[] edge;
	static int parent[];

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());
		edge = new Edge[E];
		parent = new int[V+1];
		for (int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int value = Integer.parseInt(st.nextToken());
			edge[i] = new Edge(start, end, value);
		}
		Arrays.sort(edge, (a,b)-> a.v- b.v);
		int cnt = 0;
		make();
		for (int i = 0; i < E; i++) {
			Edge e = edge[i];
			if(find(e.s) == find(e.e))
				continue;
			union(e.s,e.e);
			ans += e.v;
			cnt++;
			if(cnt == V - 1)
				break;
		}
		System.out.println(ans);
	}

	static private void make() {
		for (int i = 1; i <= V; i++) {
			parent[i] = i;
		}
	}

	static private int find(int a) {
		if (parent[a] == a)
			return a;
		return parent[a] = find(parent[a]);
	}

	static private void union(int a, int b) {
		int aroot = find(a);
		int broot = find(b);
		if(aroot < broot)
			parent[broot] = aroot;
		else
			parent[aroot] = broot;
	}

	static class Edge {
		int s, e, v;

		Edge(int s, int e, int v) {
			this.s = s;
			this.e = e;
			this.v = v;
		}
	}
}
