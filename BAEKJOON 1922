import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	
	static int N,M;
	static int[] parent;
	static int[][] arr;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());
		arr = new int[M][3];
		for (int i = 0; i < M; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			arr[i][0] = Integer.parseInt(st.nextToken());
			arr[i][1] = Integer.parseInt(st.nextToken());
			arr[i][2] = Integer.parseInt(st.nextToken());
		}
		
		Arrays.sort(arr,(a,b) -> a[2] - b[2]);
		make();
		int cnt = 0, ans = 0;
		for (int i = 0; i < M; i++) {
			if(find(arr[i][0]) != find(arr[i][1])) {
				union(find(arr[i][0]),find(arr[i][1]));
				ans += arr[i][2];
				cnt++;
				if(cnt == N-1)
					break;
			}
		}
		System.out.println(ans);
	}
	
	private static void make() {
		parent = new int[N+1];
		for (int i = 1; i <=N; i++) {
			parent[i] = i;
		}
	}
	
	private static int find(int a) {
		if(parent[a] == a)
			return a;
		return parent[a] = find(parent[a]);
	}

	private static void union(int a, int b) {
		int aroot = find(a);
		int broot = find(b);
		if(aroot<broot)
			parent[broot] = aroot;
		else
			parent[aroot] = broot;
	}
}
