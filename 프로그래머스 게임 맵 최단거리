import java.util.LinkedList;
import java.util.Queue;

class Solution {

        public static int solution(int[][] maps) {
        int answer = 0;
        boolean[][] visit = new boolean[maps.length][maps[0].length];
        answer = dfs(maps, visit);
        return answer;
    }

	private static int dfs(int[][] maps, boolean[][] visit) {
		int dy[] = {-1,1,0,0}, dx[] = {0,0,-1,1}; //4방 탐색 
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(0,0,1));
		visit[0][0] = true;
		while(!q.isEmpty()) {
			Node n = q.poll();
			if(n.y == maps.length-1 && n.x == maps[0].length-1) { // 끝점에 도착하면 리턴
				return n.cnt;
			}
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny < 0 || nx < 0 || ny >= maps.length || nx >= maps[0].length || visit[ny][nx] || maps[ny][nx] == 0)
					continue;
				q.offer(new Node(ny,nx,n.cnt+1));
				visit[ny][nx] = true;
			}
		}
		return -1; //여기 까지오면 실패한경우 
	}
	
	static class Node{
		int y, x, cnt;
		Node(int y, int x, int cnt){
			this.y =y;
			this.x = x;
			this.cnt = cnt;
		}
	} 
}
