import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	
	static int T;
	static int[] map = new int[101];
	static int[] cnt = new int[101];
	static Queue<Integer> q = new LinkedList<Integer>();
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		T = Integer.parseInt(st.nextToken()) + Integer.parseInt(st.nextToken()); //뱀, 사다리 수
		for (int i = 0; i < T; i++) { // 뱀사다리 정보를 map에 입력해준다
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			map[s] = e;
		}
		q.offer(1); //시작은 1에서 시작
		bfs();
	}

	private static void bfs() {
		while(!q.isEmpty()) {
			int n = q.poll();
			if (n == 100) { // q에서 뺴낸 값이 100이면 가장먼저 도착했음 출력을 해준뒤 종료
				System.out.println(cnt[100]);
				return;
			}
			for (int i = 1; i <= 6; i++) { //주사위 1~6에대해 체크를 한다
				if(n+i > 100 || cnt[n+i] != 0) //100을 넘어가거나 이미 방문했으면 넘어감
					continue;
				if(map[n+i] == 0) { // 뱀이나 사다리가 아니면 해당 자리를 방문처리 및 큐에 삽입
					q.offer(n+i);
					cnt[n+i] = cnt[n]+1;
				}else {
					if(cnt[map[n+i]]!= 0) { // 해당 map가 사다리 or 뱀인데 연결된 부분이 방문한경우
						cnt[n+i] = cnt[n]+1; // 주사위에서 이동한 부분만 방문처리
						continue;
					}
					cnt[map[n+i]] = cnt[n]+1; // 연결 부분이 방문안했으면 똑같은 값으로 방문처리하고 q 삽입
					q.offer(map[n+i]); 
				}
			}
		}
	}
}
