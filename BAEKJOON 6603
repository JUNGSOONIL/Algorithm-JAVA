import java.io.*;
import java.util.*;

public class Main {
	static int[] in, out;
	static int N;
	static Stack<String> s = new Stack<>();
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int count = 0;
		while (true) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			if (N == 0) {
				break;
			}
			in = new int[N];
			for (int i = 0; i < N; i++) {
				in[i] = Integer.parseInt(st.nextToken());
			}
			out = new int[N];
			while(++count <= 6) {
				out[N-count] = 1;
			}
			do {
				String str = "";
				for (int i = 0; i < N; i++) {
					if(out[i] == 1)
						str += in[i]+" ";
				}
				s.push(str);
			}while(np(out));
			while(!s.isEmpty())
				System.out.println(s.pop());
			System.out.println();
			count = 0;
		}
		
	}

	private static boolean np(int[] numbers) {
		int n = numbers.length;

		int i = n - 1;
		while (i > 0 && numbers[i - 1] >= numbers[i])
			--i;

		if (i == 0)
			return false;

		int j = n - 1;
		while (numbers[i - 1] >= numbers[j])
			--j;

		swap(numbers, i - 1, j);

		int k = n - 1;
		while (i < k) {
			swap(numbers, i++, k--);
		}
		return true;
	}

	private static void swap(int[] numbers, int i, int j) {
		int temp = numbers[i];
		numbers[i] = numbers[j];
		numbers[j] = temp;
	}
}
