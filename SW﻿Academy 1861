import java.io.*;
import java.util.StringTokenizer;

public class Solution{
	static int[][] map;
	static int[][] check;
	static int N, count, max, min;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			count = 1;
			max = 1;
			min= Integer.MAX_VALUE;
			N = Integer.parseInt(br.readLine());
			map = new int[N][N];
			check = new int[N][N];

			for (int i = 0; i < N; i++) {
				StringTokenizer st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					ok(i, j);
					check[i][j] = count;
					max = Math.max(count, max);
					count = 1;
				}
			}
			
			for (int i = N - 1; i >= 0; i--) {
				for (int j = N - 1; j >= 0; j--) {
					if (check[i][j] == max) {
						min = Math.min(min, map[i][j]);
					}
				}
			}
			System.out.println("#" + t + " " + min + " " + max);
		}
	}

	public static int[] dy = { -1, 1, 0, 0 };
	public static int[] dx = { 0, 0, -1, 1 };

	public static void ok(int i, int j) {
		int ny = i;
		int nx = j;
		for (int k = 0; k < 4; k++) {
			ny = ny + dy[k];
			nx = nx + dx[k];

			if (ny < 0 || nx < 0 || ny >= N || nx >= N) {
				ny = i;
				nx = j;
				continue;
			}
			if (map[i][j] + 1 == map[ny][nx]) {
				// System.out.println(i+","+j+","+ny+","+nx);
				count++;
				ok(ny, nx);
			}
			ny = i;
			nx = j;
		}
	}
}
