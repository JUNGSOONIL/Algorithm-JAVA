import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Solution {
	static long ans;
	static int N;
	static double E;
	static int parents[];
	static Edge[] edge;
	static int cnt, index;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());

		for (int t = 1; t <= T; t++) {
			ans = 0; cnt = 0; index = 0;
			N = Integer.parseInt(br.readLine());

			int[][] arr = new int[N][2];
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int i = 0; i < N; i++)
				arr[i][0] = Integer.parseInt(st.nextToken());
			
			st = new StringTokenizer(br.readLine());
			for (int i = 0; i < N; i++)
				arr[i][1] = Integer.parseInt(st.nextToken());

			E = Double.parseDouble(br.readLine());

			edge = new Edge[N * (N - 1) / 2];
			
			for (int i = 0; i < N; i++) {
				for (int j = i + 1; j < N; j++) {
					edge[index++] = new Edge(i, j,(long) (Math.pow(arr[i][0] - arr[j][0], 2) + Math.pow(arr[i][1] - arr[j][1], 2)));
				}
			}

			Arrays.sort(edge);
			parents = new int[N];
			makeset();
			
			for (int i = 0; i < edge.length; i++) {
				if(findSet(edge[i].y) == findSet(edge[i].x)) continue;
				union(edge[i].y,edge[i].x);
				ans+= edge[i].v;
				cnt++;
				if(cnt == N-1) break;
			}
			System.out.println("#"+t+" "+Math.round(E * ans));
		}
	}

	static void makeset() {
		for (int i = 0; i < N; i++) {
			parents[i] = i;
		}
	}

	static int findSet(int x) {
		if (parents[x] == x)
			return x;
		else
			return parents[x] = findSet(parents[x]);
	}

	static void union(int x, int y) {
		int px = findSet(x);
		int py = findSet(y);

		if (px < py)
			parents[py] = px;
		else
			parents[px] = py;
	}

	static class Edge implements Comparable<Edge> {
		int y, x;
		long v;

		public Edge(int y, int x, long v) {
			super();
			this.y = y;
			this.x = x;
			this.v = v;
		}

		@Override
		public int compareTo(Edge o) {
			return Long.compare(this.v, o.v);
		}
	}
}
