import java.io.*;
import java.util.*;

public class Main {
	static int R, C, T, AIRY, AIRX;
	static int[][] map, result;
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };
	static Queue<Node> q = new LinkedList<>();
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		T = Integer.parseInt(st.nextToken());
		map = new int[R][C];
		result = new int[R][C];
		for (int i = 0; i < R; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < C; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == -1) {
					AIRY = i;
					AIRX = j;
				}
			}
		}
		while (T-- > 0) {
			bfs();
			check();
			AIRY++;		
			for (int i = 0; i < R; i++) {
				for (int j = 0; j < C; j++) {
					map[i][j] = result[i][j];
					result[i][j] = 0;
				}
			}
		}
		int ans = 0;
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				if (map[i][j] > 0) {
                    ans += map[i][j];
                }
			}
		}
		System.out.println(ans);
	}
    
	static void check() {
		for (int i = 0; i < 2; i++) {
			int[] index;
			if (i == 0) {
				index = new int[] { 1, 3, 0, 2 };
			} else {
				AIRY -= 1;
				index = new int[] { 0, 3, 1, 2 };
			}
			result[AIRY][AIRX] = -1;
			int ny = AIRY;
			int nx = AIRX;
			roop:
			for (int j = 0; j < 4; j++) {
				while (true) {
					int sy = ny + dy[index[j]];
					int sx = nx + dx[index[j]];
					if (sy < 0 || sx < 0 || sy >= R || sx >= C) {
						ny = sy - dy[index[j]];
						nx = sx - dx[index[j]];
						break;
					}
					if(i == 0 && index[j] == 0 && sy <AIRY )
						break;
					if(i == 1 && index[j] == 1 && sy >AIRY )
						break;
					if (result[sy][sx] == -1) {
						result[ny][nx] = 0;
						break roop;
					}
					if(result[ny][nx] != -1)
						result[ny][nx] = result[sy][sx];
					ny += dy[index[j]];
					nx += dx[index[j]];
				}
			}

		}
	}

	static void bfs() {
		boolean[][] visit = new boolean[R][C];
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				if (map[i][j] > 0 && !visit[i][j]) {
					q.offer(new Node(i, j, map[i][j]));
					visit[i][j] = true;
				}
			}
		}
		while (!q.isEmpty()) {
			Node n = q.poll();
			int cnt = 0;
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if (ny < 0 || nx < 0 || ny >= R || nx >= C || map[ny][nx] == -1)
					continue;
				result[ny][nx] += map[n.y][n.x] / 5;
				cnt++;
			}
			result[n.y][n.x] += map[n.y][n.x] - (map[n.y][n.x] / 5) * cnt;
		}
	}

	static class Node {
		int y, x, d;
		Node(int y, int x, int d) {
			this.y = y;
			this.x = x;
			this.d = d;
		}
	}
}
