import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int k, W, H;
	static int[][] map;
	static boolean[][][] select;
	static int[] dy = { 1, 0, -1,  0 }, dx = { 0, 1,  0, -1 };
	static int[] hy ={ 1,  1, -2, -2, -1, -1, 2,  2 }, hx = { 2, -2,  1, -1,  2, -2, 1, -1 };
	static Queue<Node> q = new LinkedList<>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		k = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		W = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());
		map = new int[H][W];
		select = new boolean[H][W][k + 1];
		for (int i = 0; i < H; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < W; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		q.offer(new Node(0,0,k,0));
		bfs();
	}

	private static void bfs() {
		while (!q.isEmpty()) {
			Node n = q.poll();
			if(n.y == H-1 && n.x == W-1) {
				System.out.println(n.d);
				return;
			}
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny <0 || nx <0|| ny >=H || nx>= W || map[ny][nx] == 1||select[ny][nx][n.k]) continue;
				select[ny][nx][n.k] = true;
				q.offer(new Node(ny,nx,n.k,n.d+1));
			}
			if(n.k == 0) continue;
			for (int i = 0; i < 8; i++) {
				int ny = n.y + hy[i];
				int nx = n.x + hx[i];
				if(ny <0 || nx <0|| ny >=H || nx>= W || map[ny][nx] == 1||select[ny][nx][n.k-1]) continue;
				select[ny][nx][n.k-1] = true;
				q.offer(new Node(ny,nx,n.k-1,n.d+1));
			}
		}
		System.out.println(-1);
	}

	static class Node {
		int y,x,k,d;

		Node(int y, int x, int k, int d) {
			this.y = y;
			this.x = x;
			this.k = k;
			this.d = d;
		}
	}
}
