import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N, M, ans = 1, k;
	static char[][] map;
	static boolean[][][] visit;
	static Queue<Node> q = new LinkedList<>();
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new char[N][M];
		visit = new boolean[N][M][2];

		for (int i = 0; i < N; i++) {
			map[i] = br.readLine().toCharArray();
		}

		visit[0][0][0] = true;
		q.offer(new Node(0,0,1,0));
		bfs();
	}

	private static void bfs() {
		while (!q.isEmpty()) {
			Node n = q.poll();
			if(n.y == N-1 && n.x == M-1) {
				System.out.println(n.cnt);
				return;
			}
				
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];

				if (ny < 0 || nx < 0 || ny >= N || nx >= M)
					continue;
				if(map[ny][nx] == '0' && !visit[ny][nx][n.wall]) {
					q.offer(new Node(ny,nx,n.cnt+1,n.wall));
					visit[ny][nx][n.wall] = true;
				}else if(map[ny][nx] == '1' && n.wall ==0) {
					q.offer(new Node(ny,nx,n.cnt+1,1));
					visit[ny][nx][1] = true;
				}
			}
		}
		System.out.println(-1);
	}

	static class Node {
		int y, x, cnt, wall;

		Node(int y, int x, int cnt, int wall) {
			this.y = y;
			this.x = x;
			this.cnt = cnt;
			this.wall = wall;
		}
	}
}
