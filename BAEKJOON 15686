import java.io.*;
import java.util.*;

public class Main {
	static int[][] home;
	static int[][] BBQ;
	static int[] output;
	static int N, M, min = Integer.MAX_VALUE, countbbq, counthome, sum, k = Integer.MAX_VALUE;

	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		BBQ = new int [N*N][2];
		home = new int[N*N][2];
		output = new int[M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				int n = Integer.parseInt(st.nextToken());
				if(n == 2) {
					BBQ[countbbq][0] = i;
					BBQ[countbbq++][1] = j; 
				}
				if(n ==1) {
					home[counthome][0] = i;
					home[counthome++][1] = j; 
				}
			}
		}
		comb(0,0);
		System.out.println(min);
	}

	static void comb(int start, int index) {
		if(index == output.length) {
			for (int i = 0; i < counthome; i++) {
				for (int j = 0; j < output.length; j++) {
					k = Math.min(k, (Math.abs(home[i][0] - BBQ[output[j]][0]) + Math.abs(home[i][1] - BBQ[output[j]][1])));
				}
				sum = sum + k;
				k = Integer.MAX_VALUE;
			}
			min = Math.min(min, sum);
			sum = 0;
			return;
		}

		for (int i = start; i < countbbq; i++) {
			output[index] = i;
			comb(i+1,index+1);
		}
	}
}
