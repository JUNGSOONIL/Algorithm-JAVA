import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static int N, M;
	static int[][] map, res;
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		res = new int[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				res[i][j] = -1;
			}
		}
		
		System.out.println(dfs(0,0));
	}

	private static int dfs(int y, int x) {
		if(y == N-1 && x == M-1) {
			return 1;
		}
		if(res[y][x] != -1) {
			return res[y][x];
		}
		res[y][x] = 0;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if(ny<0 || nx <0 || ny>=N || nx>=M || map[ny][nx] >= map[y][x] ) continue;
			res[y][x] += dfs(ny,nx);
		}
		return res[y][x];
	}
}
