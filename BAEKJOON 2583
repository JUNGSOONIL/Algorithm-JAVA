import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static int M, N, K, count;
	static int[][] map;
	static boolean[][] visit;
	static int[] cnt, dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new int[M][N];
		visit = new boolean[M][N];
		cnt = new int[N * M];
		for (int k = 0; k < K; k++) {
			st = new StringTokenizer(br.readLine());
			int sx = Integer.parseInt(st.nextToken());
			int sy = Integer.parseInt(st.nextToken());
			int ex = Integer.parseInt(st.nextToken());
			int ey = Integer.parseInt(st.nextToken());
			for (int i = sy; i < ey; i++) {
				for (int j = sx; j < ex; j++) {
					map[i][j] = 1;
				}
			}
		}	
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] == 0 && !visit[i][j]) {
					cnt[count]++;
					visit[i][j] = true;
					dfs(i, j);
					count++;
				}
			}
		}
		Arrays.sort(cnt);
		System.out.println(count);
		for (int i = 0; i < cnt.length; i++) {
			if(cnt[i] != 0)
				System.out.print(cnt[i]+" ");
		}
	}

	private static void dfs(int y, int x) {
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if(ny<0||nx<0||ny>=M||nx>=N|| visit[ny][nx]|| map[ny][nx] == 1) continue;
			cnt[count]++;
			visit[ny][nx] = true;
			dfs(ny, nx);
		}
	}

}
