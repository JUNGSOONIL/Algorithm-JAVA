import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int V, E, K;
	static ArrayList<ArrayList<Edge>> list = new ArrayList<ArrayList<Edge>>();
	static PriorityQueue<Edge> pq = new PriorityQueue<Edge>((a, b) -> a.v - b.v);
	static boolean[] visit;
	static int[] cost;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(br.readLine());
		
		visit = new boolean[V+1];
		cost = new int[V+1];
		for (int i = 0; i <= V; i++) {
			list.add(new ArrayList<>());
			cost[i] = Integer.MAX_VALUE;
		}
		
		for (int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			list.get(s).add(new Edge(e,v));
		}
		
		cost[K] = 0;
		pq.offer(new Edge(K,0));
		while(!pq.isEmpty()) {
			Edge pe = pq.poll();
			if(visit[pe.s]) continue;
			visit[pe.s] = true;
			for (Edge ne : list.get(pe.s)) {
				if(ne.v + cost[pe.s] < cost[ne.s]) {
					cost[ne.s] = ne.v + cost[pe.s];
					pq.offer(new Edge(ne.s,cost[ne.s]));
				}
					
			}
		}
		for(int i =1; i<=V;i++) {
			if(visit[i]) System.out.println(cost[i]);
			else System.out.println("INF");
		}
	}

	static class Edge {
		int s;
		int v;

		public Edge(int s, int v) {
			this.s = s;
			this.v = v;
		}
	}
}
