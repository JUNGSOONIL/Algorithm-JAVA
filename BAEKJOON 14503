import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int N, M, ans = 1;
	static int ry, rx, rd;
	static int[][] map;
	static int[] dy = {-1,0,1,0}, dx = {0,1,0,-1};
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		st = new StringTokenizer(br.readLine());
		ry = Integer.parseInt(st.nextToken());
		rx = Integer.parseInt(st.nextToken());
		rd = Integer.parseInt(st.nextToken());
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		dfs(ry,rx,rd);
		System.out.println(ans);
	}
	private static void dfs(int y, int x, int d) {
		map[y][x] = 2;
		for (int i = 0; i < 4; i++) {
			d -= 1;
			if(d == -1)
				d = 3;
			int ny = y + dy[d];
			int nx = x + dx[d];
			if(ny >= 0 && nx >= 0 && ny < N && nx <  M && map[ny][nx] == 0) {
				ans++;
				dfs(ny,nx, d);
				return;
			}
		}
		d = d >= 2 ? d - 2 : d + 2;
		
		int ny = y + dy[d];
		int nx = x + dx[d];
		if(ny >= 0 && nx >= 0&& ny < N && nx < M && map[ny][nx] != 1) {
			d = d >= 2 ? d - 2 : d + 2;
			dfs(ny,nx, d);
		}
	}
}
