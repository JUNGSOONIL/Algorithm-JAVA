import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	
	static int N,M,K,X;
	static int[] cost;
	static boolean[] visit;
	static ArrayList<Integer>[] list;
	static PriorityQueue<Node> pq = new PriorityQueue<>((a,b) -> a.value - b.value); // 람다식으로 pq 정렬
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		StringBuilder sb = new StringBuilder();
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		X = Integer.parseInt(st.nextToken());
		cost = new int[N+1];
		visit = new boolean[N+1];
		list = new ArrayList[N+1];
		for (int i = 1; i <=N; i++) {
			list[i] = new ArrayList<>();
			cost[i] = Integer.MAX_VALUE; //이동 횟수를 저장할 배열을 max 값으로 초기화
		}
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			list[start].add(end);
		}
		
		pq.add(new Node(X,0));// pq에 처음 시작값을 넣어주고
		dijkstra(); // 다익스트라 실시
		for (int i = 0; i <=N; i++) {
			if(cost[i] == K && i != X) //이동 횟수가 K와 같고, 출발지가 아닌경우 sb에 추가
				sb.append(i).append("\n");
		} 
		if(sb.length() == 0) // 해당 도시가 없음
			System.out.println(-1);
		else
			System.out.println(sb);
	}
	
	private static void dijkstra() {
		while(!pq.isEmpty()) {
			Node s = pq.poll();
			if(visit[s.end]) continue;// 방문 했으면 다시 ㄷㄹ아감
			visit[s.end]= true;
			for (int e : list[s.end]) {
				if(s.value + 1 < cost[e]) { // 이동횟수기때문에 따로 가중치가 있는게 아니라 +1을 해줌
					cost[e] = s.value + 1;
					pq.offer(new Node(e,cost[e]));
				}
			}
		}
	}

	static class Node{
		int end,value;
		Node(int end, int value){
			this.end = end;
			this.value = value;
		}
	}
}
