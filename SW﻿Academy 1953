import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Solution {
	static int N, M, R, C, L, ans;
	static int[][] map;
	static boolean[][] visit;
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };
	static int[][] move = { {}, { 0, 1, 2, 3 }, { 0, 1 }, { 2, 3 }, { 0, 3 }, { 1, 3 }, { 1, 2 }, { 0, 2 } };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			ans = 1;
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			R = Integer.parseInt(st.nextToken());
			C = Integer.parseInt(st.nextToken());
			L = Integer.parseInt(st.nextToken());
			map = new int[N][M];
			visit = new boolean[N][M];
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < M; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			bfs();
			System.out.println("#" + t + " " + ans);
		}
	}

	private static void bfs() {
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(R, C, 1));
		visit[R][C] = true;
		while (!q.isEmpty()) {
			Node n = q.poll();
			if (n.d >= L)
				return;
			int[] index = move[map[n.y][n.x]];

			for (int i = 0; i < index.length; i++) {
				int ny = n.y + dy[index[i]];
				int nx = n.x + dx[index[i]];
				if (ny < 0 || nx < 0 || ny >= N || nx >= M || visit[ny][nx] || map[ny][nx] == 0)
					continue;
				if(index[i] == 0) {
					if(map[ny][nx] == 3||map[ny][nx] == 4||map[ny][nx] == 7)
						continue;
				}else if(index[i]== 1) {
					if(map[ny][nx] == 3||map[ny][nx] == 5||map[ny][nx] == 6)
						continue;
				}
				else if(index[i]== 2) {
					if(map[ny][nx] == 2||map[ny][nx] == 6||map[ny][nx] == 7)
						continue;
				}
				else if(index[i] == 3) {
					if(map[ny][nx] == 2||map[ny][nx] == 4||map[ny][nx] == 5)
						continue;
				}
				visit[ny][nx] = true;
				q.offer(new Node(ny, nx, n.d + 1));
				ans++;
			}
		}
	}

	static class Node {
		int y, x, d;
		Node(int y, int x, int d) {
			this.y = y;
			this.x = x;
			this.d = d;
		}
	}
}
