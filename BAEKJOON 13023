import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
	static int N, M, ans;
	static boolean[] visit;
	static ArrayList<Integer>[] list;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		visit = new boolean[N];
		list = new ArrayList[N];
		for (int i = 0; i < N; i++) {
			list[i] = new ArrayList<>();
		}
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			list[a].add(b);
			list[b].add(a);
		}

		for (int i = 0; i < N; i++) {
			dfs(i, 0);
			if (ans == 1)
				break;
		}
		System.out.println(ans);
	}

	private static void dfs(int index, int cnt) {
		if (cnt == 4) {
			ans = 1;
			return;
		}
		visit[index] = true;
		for (int i = 0; i < list[index].size(); i++) {
			int next = list[index].get(i); 
			if (!visit[next]) {
				dfs(next, cnt + 1);
			}
		}
		visit[index] = false;
	}
}
