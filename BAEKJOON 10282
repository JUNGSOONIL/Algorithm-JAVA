import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	
	static int n, d, c;
	static int[] cost;
	static boolean[] visit;
	static ArrayList<Node>[] list;
	static PriorityQueue<Node> pq = new PriorityQueue<>((a,b) -> a.value - b.value); // 람다식 정렬
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			st = new StringTokenizer(br.readLine());
			n = Integer.parseInt(st.nextToken());
			d = Integer.parseInt(st.nextToken());
			c = Integer.parseInt(st.nextToken());
			cost = new int[n+1];
			visit = new boolean[n+1];
			list = new ArrayList[n+1];
			for (int i = 0; i <=n; i++) {
				list[i] = new ArrayList<>();
				cost[i] = Integer.MAX_VALUE; // 다익스트라를 위해 최대값으로 초기화
			}
			for (int i = 0; i < d; i++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				int s = Integer.parseInt(st.nextToken());
				list[b].add(new Node(a,s)); //컴퓨터 b가 감염되면 s초후 a도 감염된다!!
			}
			
			cost[c] = 0; //출발은 0으로 두고 시작
			pq.add(new Node(c,0));
			dijkstra();
			
			int ans = Integer.MIN_VALUE, cnt = 0;
			for (int i = 1; i <=n; i++) { // 여기서 감염 컴퓨터 수와 max값을 찾아준다
				if(cost[i] != Integer.MAX_VALUE) {
					ans = Math.max(ans, cost[i]);
					cnt++;
				}
			}
			System.out.println(cnt+ " "+ ans);
		}
	}
	
	private static void dijkstra() { //다익스트라 알고리즘 적용
		while(!pq.isEmpty()) {
			Node start = pq.poll();
			if(visit[start.end]) continue;
			visit[start.end] = true;
			for (Node end : list[start.end]) {
				if(cost[end.end] > cost[start.end] + end.value ) {
					cost[end.end] = cost[start.end] + end.value;
					pq.add(new Node(end.end,cost[end.end]));
				}
			}
		}
	}

	static class Node{
		int end, value;
		Node(int end, int value){
			this.end = end;
			this.value = value;
		}
	}
}
