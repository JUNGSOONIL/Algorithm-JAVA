import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static boolean flag = false;
	static char map[][];
	static boolean visit[][];
	static int N, M;
	static Queue<Node> q = new LinkedList<>();
	static int[] dx = { -1, 1, 0, 0 }, dy = { 0, 0, 1, -1 };

	public static void main(String args[]) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());

		map = new char[M][N];
		visit = new boolean[M][N];
		for (int i = 0; i < M; i++) {
			map[i] = br.readLine().toCharArray();
			if (i == 0) {
				for (int j = 0; j < N; j++) {
					if(map[i][j] =='0') // 첫행에 전기 통하는 부분 다 큐에 넣어준다.
						q.offer(new Node(i, j));
				}
			}
		}
		bfs();
		if (flag) // flag가 true 몇 끝에 도달했다
			System.out.print("YES");
		else
			System.out.print("NO");
	}

	static void bfs() {
		while (!q.isEmpty()) {
			Node n = q.poll();
			if (n.y == M - 1) { // 끝에 도달했으면 flag true로 바꿔주고 빠져나옴
				flag = true;
				return;
			}
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if (nx < 0 || ny < 0 || ny >= M || nx >= N || visit[ny][nx] || map[ny][nx] == '1')
					continue;
				q.offer(new Node(ny, nx));
				visit[ny][nx] = true;
			}
		}
	}
	static class Node {
		int y, x;

		Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
}
