import java.io.*;
import java.util.*;

public class Main {
	static int[][] map;
	static int N, K, L, ans = 1, index;
	static boolean check;
	static int[] dy = { 0, 1, 0, -1 }, dx = { 1, 0, -1, 0 }; 
	static Deque<Node> deq = new ArrayDeque<>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		map = new int[N + 1][N + 1];
		K = Integer.parseInt(br.readLine());
		for (int i = 0; i < K; i++) {
			st = new StringTokenizer(br.readLine());
			int y = Integer.parseInt(st.nextToken());
			int x = Integer.parseInt(st.nextToken());
			map[y][x] = 1;
		}
		L = Integer.parseInt(br.readLine());
		deq.add(new Node(1, 1));
		map[1][1] = 2;
		loop: for (int i = 0; i < L; i++) {
			st = new StringTokenizer(br.readLine());
			int end = Integer.parseInt(st.nextToken());
			String d = st.nextToken();
			while (true) {
				if (ans > end)
					break;
				Node n = deq.peekFirst();
				int ny = n.y + dy[index];
				int nx = n.x + dx[index];
				if (ny < 1 || nx < 1 || ny > N || nx > N) {
					check = true;
					break loop;
				}
				if (map[ny][nx] == 2){
					check = true;
					break loop;
				}
				if (map[ny][nx] == 1) {
					deq.offerFirst(new Node(ny, nx));
					map[ny][nx] = 2;					
				} else {
					deq.offerFirst(new Node(ny, nx));
					map[ny][nx] = 2;
					Node last = deq.pollLast();
					map[last.y][last.x] = 0;
				}
				ans++;
			}
			if (d.equals("L"))
				index--;
			else
				index++;
			if (index == -1)
				index = 3;
			else if (index == 4)
				index = 0;
		}
		while(!check) {
			Node n = deq.peekFirst();
			int ny = n.y + dy[index];
			int nx = n.x + dx[index];
			if (ny < 1 || nx < 1 || ny > N || nx > N) {
				break;
			}
			if (map[ny][nx] == 2) {
				break;
			}
			if (map[ny][nx] == 1) {
				deq.offerFirst(new Node(ny, nx));
				map[ny][nx] = 2;
			} else {
				deq.offerFirst(new Node(ny, nx));
				map[ny][nx] = 2;
				Node last = deq.pollLast();
				map[last.y][last.x] = 0;
			}
			ans++;
		}
		System.out.println(ans);
	}

	static class Node {
		int y, x;
		Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
}
