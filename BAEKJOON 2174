import java.io.*;
import java.util.*;

public class Main {
	static int A, B, N, M;
	static TreeMap<Integer, Robot> treemap = new TreeMap<>();
	static boolean check;
	static int map[][];
	static int dy[] = { 0, 1, 0, -1 }, dx[] = { 1, 0, -1, 0 };
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		A = Integer.parseInt(st.nextToken());
		B = Integer.parseInt(st.nextToken());

		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[B + 1][A + 1];
		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			String d = st.nextToken();
			map[y][x] = i;
			if (d.equals("N"))
				treemap.put(i, new Robot(x, y, 0));
			else if (d.equals("E"))
				treemap.put(i, new Robot(x, y, 1));
			else if (d.equals("S"))
				treemap.put(i, new Robot(x, y, 2));
			else if (d.equals("W"))
				treemap.put(i, new Robot(x, y, 3));
		}
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int num = Integer.parseInt(st.nextToken());
			String d = st.nextToken();
			int cnt = Integer.parseInt(st.nextToken());
			move(num, d, cnt);
			if (check)
				return;
		}
		System.out.println("OK");
	}
	
	private static void move(int num, String com, int cnt) {
	      Robot r = treemap.get(num);
	      if (com.equals("F")) {
	    	  int nx = r.x;
	    	  int ny = r.y;
	         for (int i = 0; i < cnt; i++) {
	            ny = ny + dx[r.d];
	            nx = nx + dy[r.d];
	            if (ny < 1 || nx < 1 || ny > B || nx > A) {
	               System.out.println("Robot " + num + " crashes into the wall");
	               check = true;
	               return;
	            }
	            if (map[ny][nx] != 0 && map[ny][nx] != num) {
	               System.out.println("Robot " + num + " crashes into robot " + map[ny][nx]);
	               check = true;
	               return;
	            }
	         }
	         map[ny][nx] = num;
	         map[r.y][r.x] = 0;
	         treemap.put(num, new Robot(nx,ny,r.d));   
	      } else {
	         cnt %= 4;
	         if (com.equals("L")) {
	            for (int i = 0; i < cnt; i++) {
	                r.d--;
	                if(r.d == -1)
	                   r.d = 3;
	            }
	         } else {
	            for (int i = 0; i < cnt; i++) {
	                r.d++;
	                if(r.d == 4)
	                   r.d = 0;
	            }
	         }
	         treemap.put(num, new Robot(r.x,r.y,r.d));
	      }
	   }
	
	public static class Robot {
		int x;
		int y;
		int d;
		public Robot(int x, int y, int d) {
			this.x = x;
			this.y = y;
			this.d = d;
		}
	}
}
