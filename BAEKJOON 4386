import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static Edge[] edge;
	static int[] parent;
	static int T;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		T = Integer.parseInt(br.readLine());
		double[][] arr = new double[T][2];
        
		for (int i = 0; i < T; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			arr[i][0] = Double.parseDouble(st.nextToken());
			arr[i][1] = Double.parseDouble(st.nextToken());
		}
        
		edge = new Edge[T * (T - 1) / 2];
		int index = 0;
		for (int i = 0; i < T - 1; i++) {
			for (int j = i + 1; j < T; j++) {
				double d = Math.sqrt(
						Math.pow(Math.abs(arr[i][0] - arr[j][0]), 2) + Math.pow(Math.abs(arr[i][1] - arr[j][1]), 2));
				edge[index++] = new Edge(i, j, d);
			}
		}
        
		make();
		Arrays.sort(edge, (a, b) -> Double.compare(a.v, b.v));
		int cnt = 0;
		double ans = 0;
		for (int i = 0; i < T * (T - 1) / 2; i++) {
			Edge e = edge[i];
			if(find(e.s) != find(e.e)) {
				union(e.s,e.e);
				ans += e.v;
				cnt++;
			}
			if(cnt == T-1)
				break;
		}
		System.out.printf("%.2f",ans);
	}

	static void make() {
		parent = new int[T + 1];
		for (int i = 1; i <= T; i++) {
			parent[i] = i;
		}
	}

	static int find(int a) {
		if (parent[a] == a)
			return a;
		return parent[a] = find(parent[a]);
	}

	static void union(int a, int b) {
		int ar = find(a);
		int br = find(b);
		if (ar < br)
			parent[br] = ar;
		else
			parent[ar] = br;
	}

	static class Edge {
		int s, e;
		double v;
		Edge(int s, int e, double v) {
			this.s = s;
			this.e = e;
			this.v = v;
		}
	}
}
