import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N, M, sy, sx, ey, ex;
	static int map[][], dy[] = {-1,1,0,0}, dx[] = {0,0,-1,1};
	static boolean[][][] visit;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		visit = new boolean[N][M][2]; // 3차원 배열을 통해 벽을 하나 부슨경우와 아닌경우에 대해서 체크
		st = new StringTokenizer(br.readLine());
		sy = Integer.parseInt(st.nextToken())-1; // 시작점을 1,1로 뒀지만 0,0으로 사용하기 위해 -1을 해준다
		sx = Integer.parseInt(st.nextToken())-1;
		st = new StringTokenizer(br.readLine());
		ey = Integer.parseInt(st.nextToken())-1;
		ex = Integer.parseInt(st.nextToken())-1;
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		bfs(); // bfs를 돌린다
	}
	
	private static void bfs() {
		Queue<Node> q = new LinkedList<>();
		visit[sy][sx][0] = true;
		q.offer(new Node(sy,sx,0,0));// 시작점을 큐에 넣고 시작
		while (!q.isEmpty()) {
			Node n = q.poll();
			if(n.y == ey && n.x == ex) { // 도착점과 같으면 bfs기떄문에 가장 먼저온거 cnt를 출력하고 끝낸다
				System.out.println(n.cnt);
				return;
			}
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];

				if (ny < 0 || nx < 0 || ny >= N || nx >= M)
					continue;
				if(map[ny][nx] == 0 && !visit[ny][nx][n.wall]) { // 이동가능하고 방문안했으면 큐에 담고 방문 체크
					q.offer(new Node(ny,nx,n.cnt+1,n.wall));
					visit[ny][nx][n.wall] = true;
				}else if(map[ny][nx] == 1 && n.wall ==0) { // 벽을 만났는데 아직 벽을 부스지 않았으면 벽부슨걸로 바꿔줌
					q.offer(new Node(ny,nx,n.cnt+1,1));
					visit[ny][nx][1] = true;
				}
			}
		}
		System.out.println(-1); // 여기까지오면 모두 실패한거
	}

	static class Node{
		int y,x,cnt,wall;
		Node(int y, int x, int cnt, int wall){
			this.y = y;
			this.x = x;
			this.cnt = cnt;
			this.wall = wall;
		}
	}
}
