import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Solution {
	static int N, M, Asum, Bsum, count, d, min;
	static int[][] map;
	static int[] A, B;
	static boolean[] select;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int T = Integer.parseInt(br.readLine());

		for (int t = 1; t <= T; t++) {
			N = Integer.parseInt(br.readLine());
			M = N / 2;
			map = new int[N + 1][N + 1];
			min = Integer.MAX_VALUE;
			A = new int[M];
			B = new int[M];
			for (int i = 1; i <= N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 1; j <= N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			comb(0, 0);
			System.out.println("#"+t+" "+min);
		}
	}

	public static void comb(int start, int index) {
		select = new boolean[N];
		Asum = 0; Bsum = 0; d = 0;
		if (index == M) {
			
			for (int i = 0; i < M; i++) {
				for (int j = 0; j < N; j++) {
					if (A[i] == j + 1) {
						select[j] = true;
					}
				}
			}
			
			for (int i = 0; i < N; i++) {
				if(!select[i])
					B[d++] = i+1;
			}
			for (int i = 0; i < M; i++) {
				for (int j = 0; j <M; j++) {
					Asum = Asum + map[A[i]][A[j]];
					Bsum = Bsum + map[B[i]][B[j]];
				}
			}
			min = Math.min(min, Math.abs(Asum-Bsum));
			return;
		}

		for (int i = start; i < N; i++) {
			A[index] = i + 1;
			comb(i + 1, index + 1);
		}
	}
}
