import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
	static int N, cost[][], dy[] = {-1,1,0,0}, dx[]={0,0,-1,1};
	static char[][] map;
	static Queue<Node> q = new LinkedList<>();
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
		N = Integer.parseInt(br.readLine());
		map = new char[N][N];
		cost = new int[N][N];
		for (int i = 0; i < N; i++) {
			map[i] = br.readLine().toCharArray();
			for (int j = 0; j < N; j++) {
				cost[i][j] = Integer.MAX_VALUE; // 벽 부순 횟수 저장 할 배열을 최대값으로 초기화
			}
		}
		bfs();
		System.out.println(cost[N-1][N-1]);
	}
	private static void bfs() {
		cost[0][0] = 0;
		q.offer(new Node(0,0));
		while(!q.isEmpty()) {
			Node n = q.poll();
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny <0 || nx < 0 || ny >= N || nx >= N) // 배열 범위 벗어난곳
					continue;
				if(cost[ny][nx] <= cost[n.y][n.x]) // 이동하려는 값이 이전값보다 작거나 같으면 멈춤
					continue;
				q.add(new Node(ny,nx));
				if(map[ny][nx] == '1') // 이동 할 수 있으면 이전 값을 그대로 넣어주고
					cost[ny][nx] = cost[n.y][n.x]; 
				else  // 벽일 경우 1증가시켜줌
					cost[ny][nx] = cost[n.y][n.x]+1;
			}
		}
	}
	static class Node{
		int y,x;
		Node(int y, int x){
			this.y = y;
			this.x =x;
		}
	}
}
