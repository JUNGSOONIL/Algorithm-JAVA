import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
	
	static int N, dy[]= {-1,1,0,0,-1,-1,1,1}, dx[] = {0,0,-1,1,1,-1,-1,1}; // 8방탐색을 위해
	static char map[][], cnt[][]; // map는 지뢰 위치를 담는 배열, cnt는 출력하는 배열
	static boolean flag; //지뢰 클릭했는지 체크
	static Queue<Node> q = new LinkedList<>(); //사용자가 누를 부분 담을 큐
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		map = new char[N][N];
		cnt = new char[N][N];
		for (int i = 0; i < N; i++) {
			map[i] = br.readLine().toCharArray();
		}
		for (int i = 0; i < N; i++) {
			cnt[i] = br.readLine().toCharArray();
			for (int j = 0; j < N; j++) {
				if(cnt[i][j] == 'x') // 누른부분에 대해서 좌표값을 큐에 담는다
					q.offer(new Node(i,j));
			}
		}
		bfs(); //누른 부분 8방탐색을 통해 주위 지뢰 체크해서 cnt배열에 값 갱신
		if(!flag) 
			print();
		else // flag가 true면 지뢰 누름
			printx();
	}
	
	private static void printx() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if(map[i][j] == '*') // 지뢰 인 경우 지뢰를 출력 나머진 그대로
					System.out.print("*");
				else
					System.out.print(cnt[i][j]);
			}
			System.out.println();
		}
	}

	private static void print() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				System.out.print(cnt[i][j]);
			}
			System.out.println();
		}
	}

	private static void bfs() {
		while(!q.isEmpty()) {
			Node n = q.poll();
			if(map[n.y][n.x] =='*') //만약 지뢰를 클릭했으면 flag 값을 true로 변경
				flag = true;
			int sum = 0;
			for (int i = 0; i < 8; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny <0 || nx < 0 || ny >= N || nx >= N)
					continue;
				if(map[ny][nx] == '*')
					sum++;
			}
			cnt[n.y][n.x] = (char)(sum + '0'); // int 값을 char로 변경하는데 +'0'을 해주면 똑같은 숫자형태의 char로 변경가능
		}
	}

	static class Node{
		int y, x;
		Node(int y, int x){
			this.y = y;
			this.x = x;
		}
	}
}
