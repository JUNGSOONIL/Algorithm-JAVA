import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Solution {
	static int N, M, cnt, ans;
	static ArrayList<Integer>[] big, small;
	static boolean[] visit;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T =Integer.parseInt(br.readLine());
		for (int t = 1; t <=T; t++) {
            ans = 0;
			N = Integer.parseInt(br.readLine());
			M = Integer.parseInt(br.readLine());
			big = new ArrayList[N+1];
			small = new ArrayList[N+1];
			for (int i = 1; i < N+1; i++) {
				big[i] = new ArrayList<>();
				small[i] = new ArrayList<>();
			}
			for (int i = 0; i < M; i++) {
				StringTokenizer st = new StringTokenizer(br.readLine());
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				big[s].add(e);
				small[e].add(s);
			}
			for (int i = 1; i < N+1; i++) {
				visit = new boolean[N+1];
				cnt = 0;
				dfsbig(i);
				dfssmall(i);
				if(cnt == N-1)
					ans++;
			}
			System.out.println("#"+t+" "+ans);
		}
	}
	private static void dfsbig(int n) {
		visit[n] = true;
		for (int b : big[n]) {
			if(!visit[b]) {
				cnt++;
				dfsbig(b);
			}
				
		}
	}
	
	private static void dfssmall(int n) {
		visit[n] = true;
		for (int s : small[n]) {
			if(!visit[s]) {
				cnt++;
				dfssmall(s);
			}
		}
	}
}
