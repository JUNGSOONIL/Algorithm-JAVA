import java.io.*;
import java.util.*;

public class Main {
	static int[][] arr, map;
	static int[] dy = { 0, 1, 0, -1 };
	static int[] dx = { -1, 0, 1, 0 };
	static int[] c;
	static int N, count;
	static Queue<Integer> q1 = new LinkedList<>();
	static Queue<Integer> q2 = new LinkedList<>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		map = new int[N][N];
		c = new int[N * N];
		for (int i = 0; i < N; i++) {
			String str = br.readLine();
			for (int j = 0; j < N; j++) {
				arr[i][j] = str.charAt(j) - '0';
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (arr[i][j] == 1 && map[i][j] != 1) {
					count++;
					BFS(i, j);
				}
			}
		}
		System.out.println(count);
		Arrays.sort(c);
		for (int i = 0; i < N * N; i++) {
			if (c[i] != 0)
				System.out.println(c[i]);
		}
	}

	static void BFS(int y, int x) {
		q1.offer(y);
		q2.offer(x);
		map[y][x] = 1;
		c[count]++;
		while (!q1.isEmpty() && !q2.isEmpty()) {
			int ny = q1.poll();
			int nx = q2.poll();
			for (int i = 0; i < 4; i++) {
				ny = ny + dy[i];
				nx = nx + dx[i];

				if (nx >= 0 && ny >= 0 && nx < N && ny < N && arr[ny][nx] == 1 && map[ny][nx] != 1) {
					map[ny][nx] = 1;
					q1.offer(ny);
					q2.offer(nx);
					c[count]++;
				}
				ny = ny - dy[i];
				nx = nx - dx[i];
			}
		}
	}
}
