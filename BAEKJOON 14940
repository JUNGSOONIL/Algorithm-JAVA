import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N,M,sy,sx, map[][], dy[]= {-1,1,0,0}, dx[]= {0,0,-1,1};
	static boolean[][] visit;
	static Queue<Node> q = new LinkedList<>();
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		visit = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] == 2) { //목표지점의 좌표를 저장
					sy = i;
					sx = j;
				}
			}
		}
		q.offer(new Node(sy,sx)); // 목표지점부터 bfs를 돌리면서 map를 갱신
		visit[sy][sx] = true;
		map[sy][sx] = 0;
		bfs();
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[i][j] == 1 && !visit[i][j]) // 갈수있는데 막힌곳을 -1로출력
					System.out.print("-1 ");
				else
					System.out.print(map[i][j]+" ");
			}
			System.out.println();
		}
	}
	private static void bfs() {
		while(!q.isEmpty()) {
			Node n = q.poll();
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny < 0 || nx < 0 || ny >= N || nx >= M || visit[ny][nx] || map[ny][nx] == 0)
					continue;
				q.offer(new Node(ny,nx));
				visit[ny][nx] = true;
				map[ny][nx] = map[n.y][n.x] + 1;
			}
		}
	}
	
	static class Node{
		int y, x;
		Node(int y, int x){
			this.y = y;
			this.x = x;
		}
	}
}
