import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int M, N;
	static boolean[] visit;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		while(true) {
			st = new StringTokenizer(br.readLine());
			M = Integer.parseInt(st.nextToken());
			N = Integer.parseInt(st.nextToken());
			if(M==0 && N==0)
				break;
			visit = new boolean[M];
			ArrayList<ArrayList<Edge>> list = new ArrayList<>();
			for (int i = 0; i < M; i++) 
				list.add(new ArrayList<Edge>());
			int sum =0;
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				int c = Integer.parseInt(st.nextToken());
				sum += c;
				list.get(a).add(new Edge(b, c));
				list.get(b).add(new Edge(a, c));
			}
			
			PriorityQueue<Edge> pq = new PriorityQueue<>((a, b) -> Integer.compare(a.v, b.v));
			pq.addAll(list.get(0));
			visit[0] = true;
			
			int ans = 0;
			while(!pq.isEmpty()) {
				Edge edge = pq.poll();
				if(visit[edge.e]) continue;
				visit[edge.e] =true;
				ans += edge.v;
				pq.addAll(list.get(edge.e));
			}
			System.out.println(sum-ans);
		}
	}

	static class Edge {
		int e, v;
		public Edge(int e, int v) {
			this.e = e;
			this.v = v;
		}
	}
}
