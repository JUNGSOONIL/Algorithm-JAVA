import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.TreeMap;

public class Main {
	static int N,M, cnt;
	static int[][] map;
	static Queue<int []> q = new LinkedList<int[]>();
	static boolean[][] select, select2;
	static int[] dy = {-1,1,0,0};
	static int[] dx = {0,0,-1,1};
	static int[] parent;
	static TreeMap<String, Integer> treemap =new TreeMap<>(); 
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		select = new boolean[N][M];
		select2 = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[i][j] == 1&& !select[i][j]) {
					bfs(i,j);
				}
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[i][j] != 0) {
					for (int k = 0; k < 4; k++) {
						int ny = i + dy[k];
						int nx = j + dx[k];
						if(ny <0||nx<0|| ny>=N||nx>=M || select2[ny][nx]|| map[ny][nx] != 0) continue;
						select2[ny][nx] = true;
						q.offer(new int[] {i,j});
						break;
					}
				}
			}
		}
		check();
		int size = treemap.size();
		int[][] node = new int[size][3];
		for (int i = 0; i < size; i++) {
			String str = treemap.firstKey();
			st = new StringTokenizer(str);
			node[i][0] = Integer.parseInt(st.nextToken());
			node[i][1] = Integer.parseInt(st.nextToken());
			node[i][2] = treemap.get(str);
			treemap.pollFirstEntry();
		}
		Arrays.sort(node,(a,b) -> a[2] - b[2]);
		parent = new int[cnt+1];
		for (int i = 1; i < parent.length; i++) {
			parent[i] = i;
		}
		int ans= 0, v =0;
		for (int i = 0; i < size; i++) {
			if(find(node[i][0]) != find(node[i][1])) {
				union(node[i][0],node[i][1]);
				ans += node[i][2];
				v++;
			}
		}
		if(v == cnt-1)
			System.out.println(ans);
		else
			System.out.println(-1);
	}
	private static int find(int a) {
		if(parent[a] == a)
			return a;
		return parent[a] = find(parent[a]);
	}
	private static void union(int a, int b) {
		int aroot = find(a);
		int broot = find(b);
		if(aroot > broot)
			parent[broot] = aroot;
		else
			parent[aroot] = broot;
	}
	
	private static void check() {
		while(!q.isEmpty()) {
			int[] n = q.poll();
			for (int i = 0; i < 4; i++) {
				int ny = n[0];
				int nx = n[1];
				while(true) {
					ny += dy[i];
					nx += dx[i];
					if(ny <0||nx<0|| ny>=N||nx>=M || map[ny][nx] == map[n[0]][n[1]]) break;
					if(map[ny][nx] != 0) {
						int d = Math.abs(n[0] - ny) + Math.abs(n[1] - nx)-1;
						if(d < 2)
							break;
						if(map[n[0]][n[1]] < map[ny][nx])
							treemap.put(map[n[0]][n[1]]+" "+map[ny][nx], Math.min(treemap.getOrDefault(map[n[0]][n[1]]+" "+map[ny][nx], 9999), d));
						else
							treemap.put(map[ny][nx]+" "+map[n[0]][n[1]], Math.min(treemap.getOrDefault(map[ny][nx]+" "+map[n[0]][n[1]],9999), d));
						break;
					}
				}
			}
		}
	}

	private static void bfs(int y, int x) {
		cnt++;
		q.offer(new int[] {y,x});
		select[y][x] = true;
		map[y][x] = cnt;
		while(!q.isEmpty()) {
			int[] n = q.poll();
			for (int i = 0; i < 4; i++) {
				int ny = n[0] + dy[i];
				int nx = n[1] + dx[i];
				if(ny <0||nx<0|| ny>=N||nx>=M || select[ny][nx] || map[ny][nx] == 0) continue;
				select[ny][nx] = true;
				map[ny][nx] = cnt;
				q.offer(new int[] {ny,nx});
			}
		}
	}
}
