import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int w, h, ans;
	static int[][] map;
	static boolean[][] visit;
	static int[] dy = { -1, 1, 0, 0 , -1, -1, 1, 1}, dx = { 0, 0, -1, 1 , -1 , 1, 1, -1};
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		while (true) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			w = Integer.parseInt(st.nextToken());
			h = Integer.parseInt(st.nextToken());
			if (w == 0 && h == 0)
				break;
			map = new int[h][w];
			visit = new boolean[h][w];
			for (int i = 0; i < h; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < w; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			ans = 0;
			for (int i = 0; i < h; i++) {
				for (int j = 0; j < w; j++) {
					if (map[i][j] == 1 && !visit[i][j]) {
						bfs(i, j);
						ans++;
					}
				}
			}
			System.out.println(ans);
		}
	}

	private static void bfs(int y, int x) {
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(y, x));
		visit[y][x] = true;
		while (!q.isEmpty()) {
			Node n = q.poll();
			for (int i = 0; i < 8; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny < 0 || nx <0|| ny>=h || nx>=w || visit[ny][nx]||map[ny][nx] == 0)continue;
				q.offer(new Node(ny, nx));
				visit[ny][nx] = true;
			}
		}

	}

	static class Node {
		int y, x;
		Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
}
