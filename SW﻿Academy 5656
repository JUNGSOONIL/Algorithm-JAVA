import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

public class Solution {
	static int ball, M, N, ans, cnt;
	static int[][] map, res;
	static int[] out;
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			ball = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			N = Integer.parseInt(st.nextToken());

			map = new int[N][M];
			res = new int[N][M];
			out = new int[ball];
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < M; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			ans = Integer.MAX_VALUE;
			// 중복순열
			perm(0);
			System.out.println("#" + t + " " + ans);
		}

	}

	private static void perm(int index) {
		if (index == ball) {
			copy();
			move();
			count();
			ans = Math.min(ans, cnt);
			return;
		}
		for (int i = 0; i < M; i++) {
			out[index] = i;
			perm(index + 1);
		}
	}

	private static void count() {
		cnt = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(res[i][j] != 0)
					cnt++;
			}
		}
		
	}

	private static void move() {
		for (int i = 0; i < ball; i++) {
			int n = out[i];
			for (int j = 0; j < N; j++) {
				if (res[j][n] != 0) {
					bfs(j, n);
					down();
					break;
				}
			}
		}
	}

	private static void down() {
		Stack<Integer> s = new Stack<>();
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if(res[j][i] != 0)
					s.add(res[j][i]);
			}
			for (int j = N-1; j >= 0; j--) {
				if(s.isEmpty())
					res[j][i] = 0;
				else
					res[j][i] = s.pop();
			}
		}
		
	}

	private static void bfs(int y, int x) {
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(y,x,res[y][x]));
		res[y][x] = 0;
		while(!q.isEmpty()) {
			Node n = q.poll();
			for (int i = 0; i < 4; i++) {
				int ny = n.y;
				int nx = n.x;
				for (int j = 0; j < n.d-1; j++) {
					ny = ny + dy[i];
					nx = nx + dx[i];
					if(ny < 0 || nx <0|| ny>=N || nx >= M|| res[ny][nx] == 0) continue;
					q.offer(new Node(ny,nx,res[ny][nx]));
					res[ny][nx] = 0;
				}
			}
		}
	}

	private static void copy() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				res[i][j] = map[i][j];
			}
		}

	}

	static class Node {
		int y, x, d;
		Node(int y, int x, int d) {
			this.y = y;
			this.x = x;
			this.d = d;
		}
	}
}
