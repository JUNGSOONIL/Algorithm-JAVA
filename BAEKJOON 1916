import java.io.*;
import java.util.*;

public class Main {
	
	static int N, M;
	static boolean[] visit;
	static int[] cost;
	static ArrayList<ArrayList<Edge>> list = new ArrayList<>();
	static PriorityQueue<Edge> pq = new PriorityQueue<>((a,b) -> a.value - b.value);
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());

		visit = new boolean[N+1];
		cost = new int[N+1];
		
		for (int i = 0; i <=N; i++) {
			list.add(new ArrayList<>());
			cost[i] = Integer.MAX_VALUE;
		}
		
		for (int i = 0; i <M; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			list.get(s).add(new Edge(e,v));
		}
		StringTokenizer st = new StringTokenizer(br.readLine());
		int S = Integer.parseInt(st.nextToken());
		int E = Integer.parseInt(st.nextToken());
		
		cost[S] = 0;
		pq.offer(new Edge(S,0));
		while(!pq.isEmpty()) {
			Edge pe = pq.poll();
			if(visit[pe.next]) continue;
			visit[pe.next] = true;
			for (Edge ne : list.get(pe.next)) {
				if(ne.value + cost[pe.next]< cost[ne.next]) {
					cost[ne.next] = ne.value + cost[pe.next];
					pq.offer(new Edge(ne.next, cost[ne.next]));
				}
			}
		}
		System.out.println(cost[E]);
	}
	
	static class Edge {
		int next, value;
		public Edge(int n, int v) {
			this.next = n;
			this.value = v;
		}
	}
}
