import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static int[] parent;
	static ArrayList<Integer>[] list;
	static boolean[] visit;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		
		visit = new boolean[N+1];
		parent = new int[N+1];
	    list = new ArrayList[N+1];
		for (int i = 1; i <= N; i++) {
			list[i] = new ArrayList<>();
		}
		for (int i = 0; i < N-1; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int y = Integer.parseInt(st.nextToken());
			int x = Integer.parseInt(st.nextToken());
			list[y].add(x);
			list[x].add(y);
		}
		bfs();
		for (int i = 2; i <= N; i++) {
			System.out.println(parent[i]);
		}
	}
	private static void bfs() {
		Queue<Integer> q = new LinkedList<>();
		visit[1] = true;
		q.offer(1);
		while(!q.isEmpty()) {
			int m = q.poll();
			for (int l : list[m]) {
				if(!visit[l]) {
					visit[l] = true;
					q.offer(l);
					parent[l] = m;
				}
			}
		}
	}
}
