import java.io.*;
import java.util.Arrays;

public class Main {
	static int[][] arr, map;
	static int[] dy = { 0, 1, 0, -1 };
	static int[] dx = { -1, 0, 1, 0 };
	static int [] c;
	static int N, count;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		map = new int[N][N];
		c = new int[N*N];
		for (int i = 0; i < N; i++) {
			String str = br.readLine();
			for (int j = 0; j < N; j++) {
				arr[i][j] = str.charAt(j) - '0';
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (arr[i][j] == 1 && map[i][j] != 1) {
					count++;
					DFS(i, j);
				}
			}
		}
		System.out.println(count);
		Arrays.sort(c);
		for (int i = 0; i < c.length; i++) {
			if(c[i]!=0)
				System.out.println(c[i]);
		}
	}

	static void DFS(int y, int x) {
		map[y][x] = 1;
		c[count]++;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (ny < 0 || nx < 0 || ny >= N || nx >= N || arr[ny][nx] != 1 || map[ny][nx] == 1) {
				ny = y - dy[i];
				nx = x - dx[i];
				continue;
			}
			DFS(ny,nx);
		}
	}
}
