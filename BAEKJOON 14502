import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N, M, cnt, ans;
	static int[] dy = {-1 ,1,0,0};
	static int[] dx = {0,0,-1,1};
	static Queue<int[]> q = new LinkedList<>();
	static int[][] map;
	static boolean[][] select;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		select = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		comb(0,map);
		
		System.out.println(ans);
	}
	
	private static void comb( int index, int[][] map) {;
		if(index == 3) {
			int[][] map2 = new int[N][M];
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					map2[i][j] = map[i][j];
				}
			}
			bfs(map2);
			return;
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[i][j] == 0) {
					map[i][j] = 1;
					comb(index+1,map);
					map[i][j] = 0;
				}
			}
		}
	}
	
	private static void bfs(int[][] m) {
		cnt =0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				select[i][j] = false;
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(m[i][j] == 2) {
					q.offer(new int[] {i,j});
					select[i][j] = true;
				}
			}
		}
		while(!q.isEmpty()) {
			int[] n = q.poll();
			for (int i = 0; i < 4; i++) {
				int ny = n[0] + dy[i];
				int nx = n[1] + dx[i];
				if(ny< 0 || nx<0|| ny>=N || nx >=M || select[ny][nx] ||m[ny][nx] != 0) continue;
				m[ny][nx] = 2;
				select[ny][nx] = true;
				q.offer(new int[] {ny,nx});
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(m[i][j] == 0)
					cnt++;
			}
		}
		ans = Math.max(ans, cnt);
	}	
}
