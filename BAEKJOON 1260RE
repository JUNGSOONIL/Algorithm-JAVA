import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


public class Main {

	static int [][]arr = new int[1000][1000];
	static int []visit = new int[1000];
	static Queue<Integer> que=new LinkedList<Integer>();

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			
		Scanner in = new Scanner(System.in);
		
		int N = in.nextInt();
		int M = in.nextInt();
		int V = in.nextInt();
		
		for(int i=0; i<M;i++) {
			int a = in.nextInt();
			int b = in.nextInt();
			arr[a-1][b-1] = arr[b-1][a-1] = 1;
		}
		
		DFS(V,N);
		System.out.println();
		BFS(V,N);
	}
	
	public static void DFS(int v, int n) {
		visit[v-1] = 1;
		System.out.print(v+" ");
		
		for(int i=0; i<n; i++) {
			if(arr[v-1][i]==1&&visit[i]!=1){
				DFS(i+1,n);
			}
		}
	}	
	public static void BFS(int v, int n) {
		 que.offer(v);
		 visit[v-1]=2;     
		 while(!que.isEmpty()) {          
			 int rear=(int)que.poll();
			 System.out.print(rear+" ");
			 for(int i=0;i<n;i++) {         
				 if((arr[rear-1][i]==1)&&visit[i]!=2) {
					 visit[i]=2;
					 que.offer(i+1);
					 }
				 }
			 }  
	}
}
