import java.util.*;

class Solution {
	static int t;
	static boolean[][] visit;
	static char[][] arr;
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 }, answer = new int[5];

	public int[] solution(String[][] places) {
		for (t = 0; t < 5; t++) {
			arr = new char[5][5];
			Queue<Node> q = new LinkedList<>();
			for (int i = 0; i < 5; i++) { // 1. 먼저 큐에 사람의 위치를 모두 담아준다. 큐에 데이터형은 좌표값과 이동횟수를 정하도록 했다.
				arr[i] = places[t][i].toCharArray();
				for (int j = 0; j < 5; j++) {
					if (arr[i][j] == 'P')
						q.offer(new Node(i, j, 0));
				}
			}
			while (!q.isEmpty()) { // 2. 큐에서 하나씩 빼내면서 bfs를 돌려준다. 이떄 방문체크 배열도 초기화 해줌
				visit = new boolean[5][5];
				Node n = q.poll();
				dfs(n.y, n.x, n.cnt);
			}
			answer[t] = answer[t] == -1 ? 0 : 1; // 테케의 리턴배열값이 -1이면 거리두기 실패 그렇지않으면 성공
		}

		return answer;
	}

	private void dfs(int y, int x, int cnt) {
		visit[y][x] = true;
		if (cnt >= 2 || answer[t] == -1) // 이동횟수와 리턴 배열의 값을 체크(이미 -1이면 거리두기 실패 가지치기)해서 조건을 만족하면 리턴
			return;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (ny < 0 || nx < 0 || ny >= 5 || nx >= 5 || arr[ny][nx] == 'X' || visit[ny][nx]) // 배열범위 벗어나거나, 파티션에 막혔거나, 이미 방문했거나
				continue;
			if (arr[ny][nx] == 'P') { // 사람을 만났으면 거리두기 실패 리턴 배열 -1로 변경
				answer[t] = -1;
				return;
			}
			dfs(ny, nx, cnt + 1);
		}
	}

	class Node {
		int y, x, cnt;

		Node(int y, int x, int cnt) {
			this.y = y;
			this.x = x;
			this.cnt = cnt;
		}
	}
}
