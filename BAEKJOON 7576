import java.io.*;
import java.util.*;

public class Main {

	static int[][] arr, map;
	static int N, M, ans, Max = Integer.MIN_VALUE;
	static boolean select;
	static Queue<int[]> q = new LinkedList<int[]>();
	static int[] dy = { -1, 1, 0, 0 }, dx = { 0, 0, -1, 1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		arr = new int[N][M];
		map = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				int n = Integer.parseInt(st.nextToken());
				arr[i][j] = n;
				if(n==1)
					q.offer(new int[] {i,j});
			}
		}
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (arr[i][j] == 1 && map[i][j] == 0)
					BFS(i, j);
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (arr[i][j] == 0) {
					ans = -1;
					break;
				}
			}
		}

		if (ans != -1) {
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					Max = Math.max(Max, map[i][j]);
				}
			}
			ans = Max-1;
		}		
		System.out.println(ans);
	}

	static void BFS(int y, int x) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[q.peek()[0]][q.peek()[1]] == 1)
					break;
				map[q.peek()[0]][q.peek()[1]] = 1;
				q.offer(q.poll());
			}
		}
		map[y][x] = 1;
		while (!q.isEmpty()) {
			int[] po = q.poll();

			for (int i = 0; i < 4; i++) {
				int ny = po[0] + dy[i];
				int nx = po[1] + dx[i];

				if (ny >= 0 && nx >= 0 && ny < N && nx < M && arr[ny][nx] == 0 && map[ny][nx] == 0) {
					q.offer(new int[] { ny, nx });
					arr[ny][nx] = 1;
					map[ny][nx] = map[po[0]][po[1]] + 1;
				}
			}
		}
	}
}
