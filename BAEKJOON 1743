import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static int map[][], dy[] = {-1,1,0,0}, dx[]= {0,0,-1,1};
	static int R,C,K,ans, cnt;
	static boolean visit[][];
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new int[R][C];
		visit = new boolean[R][C];
		for (int i = 0; i < K; i++) { //map 시작이 1,1 이므로 -1 해줌
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken()) - 1;
			int e = Integer.parseInt(st.nextToken()) - 1;
			map[s][e] = 1;
		}
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				if(!visit[i][j] && map[i][j] == 1) { // 아직 방문안했고 1이면 dfs 돌림
					cnt = 0; //방문한곳 체크하는거 초기화
					dfs(i,j);
					ans = Math.max(ans, cnt); // 지금 저장된 max 값과 cnt값중 큰값 저장
				}
			}
		}
		System.out.println(ans);
	}
	private static void dfs(int y, int x) {
		visit[y][x] = true;
		cnt++;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if(ny < 0 || nx < 0 || ny >= R || nx >= C || visit[ny][nx] || map[ny][nx] == 0)
				continue;
			dfs(ny,nx);
		}
	}
}
