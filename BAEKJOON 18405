import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {

	static int N,K,S,Y,X,cnt, map[][], dy[] = {-1,1,0,0},dx[] = {0,0,-1,1};
	static PriorityQueue<Node> pq = new PriorityQueue<>((a,b) -> a.t == b.t ? a.n - b.n : a.t - b.t); // 우선순위 정렬을 하는데, 시간이 같으면 번호가 작은순으로 시간이 다르면 번호순으로 정렬
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		map = new int[N][N];
		K = Integer.parseInt(st.nextToken());
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] != 0)
					pq.offer(new Node(i,j,map[i][j],0)); // 입력받음과 동시에 바이러스를 큐에 넣어준다.
			}
		}
		st = new StringTokenizer(br.readLine());
		S = Integer.parseInt(st.nextToken());
		Y = Integer.parseInt(st.nextToken());
		X = Integer.parseInt(st.nextToken());
		bfs();
		System.out.println(map[Y-1][X-1]); //시작 정점이 문제는 1,1이므로 -1을 해준다.
	}
	private static void bfs() {
		while(!pq.isEmpty()) {
			Node n = pq.poll();
			if(n.t == S) //큐에서 뺀거 시간이 같다면 멈춘다.
				return;
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny <0 || nx < 0 || ny >= N || nx >= N || map[ny][nx] != 0)
					continue;
				map[ny][nx] = n.n;
				pq.offer(new Node(ny,nx,n.n,n.t+1));
			}
		}
	}
	static class Node{
		int y,x,n,t;
		Node(int y, int x, int n, int t){
			this.y = y;
			this.x = x;
			this.n = n;
			this.t = t;
		}
	}
}
