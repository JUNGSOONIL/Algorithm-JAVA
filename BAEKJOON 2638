import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N,M, ans;
	static int map[][], dy[] = {-1,1,0,0}, dx[]= {0,0,-1,1};
	static Queue<Node> q = new LinkedList<>(); // 공기에 접촉한 치즈 저장할 큐
	static boolean[][] visit;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		while(true) {
			visit = new boolean[N][M]; //방문 체크는 계속 새로 해주어야함으로 초기화 해준다.
			aircheck(0,0); // 공기 체크하고, 접촉한 치즈 큐에 추가
			if(q.isEmpty()) // 치즈가 없는 경우 종료
				break;
			change(); // 공기 2개이상 접촉한 치즈 제거
			ans++; // 시간 추가
		}
		System.out.println(ans); // 최종 걸린시간 반환
	}
	
	private static void change() { // bfs 큐가 빌때까지 돌리며 해당 부분에서 상하좌우체크 -1이 2개이상 있으면 0ㅇ로 바꿔줌
		while(!q.isEmpty()) {
			Node n = q.poll();
			int cnt = 0;
			for (int i = 0; i < 4; i++) {
				int ny = n.y + dy[i];
				int nx = n.x + dx[i];
				if(ny < 0 || nx < 0 || ny >= N || nx >= M)
					continue;
				if(map[ny][nx] == -1)
					cnt++;
			}
			if(cnt >= 2)
				map[n.y][n.x] = 0;
		}
	}

	private static void aircheck(int y, int x) { // dfs 0,0에서 시작 외부에있는 공기는 -1로 바꿔주면서 공기랑 접촉한 치즈 큐에 저장
		visit[y][x] = true;
		map[y][x] = -1;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if(ny < 0 || nx < 0 || ny >= N || nx >= M || visit[ny][nx])
				continue;
			if(map[ny][nx] == 1) {
				visit[ny][nx] = true;
				q.add(new Node(ny,nx));
			}else {
				aircheck(ny,nx);
			}	
		}
	}

	static class Node{
		int y, x;
		Node(int y, int x){
			this.y = y;
			this.x = x;
		}
	}
}
