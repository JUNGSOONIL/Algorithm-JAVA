import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	
	static int N, M;
	static double ans;
	static int[] parent;
	static Edge[] list;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		int[][] arr = new int[N+1][2];
		
		for (int i = 1; i <=N; i++) {
			st = new StringTokenizer(br.readLine());
			arr[i][0] = Integer.parseInt(st.nextToken());
			arr[i][1] = Integer.parseInt(st.nextToken());
		}
		make();
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			union(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()));
		}
		list = new Edge[N*(N-1)/2];
		
		int index = 0;
		for (int i = 1; i <=N; i++) {
			for (int j = i+1; j <=N; j++) {
				double d = Math.sqrt(Math.pow(arr[i][0] - arr[j][0], 2) + Math.pow(arr[i][1] - arr[j][1], 2));
				list[index++] = new Edge(i,j, d);
			}
		}
		
		Arrays.sort(list,(a,b) -> Double.compare(a.v, b.v));
		
		int cnt = M;
		for (int i = 0; i < N*(N-1)/2; i++) {
			Edge e = list[i];
			if(find(e.s) != find(e.e)) {
				union(e.s,e.e);
				ans += e.v;
				cnt++;
			}
			if(cnt == N-1)
				break;
		}
		System.out.printf("%.2f",ans);
	}
	
	static void make() {
		parent = new int[N+1];
		for (int i = 1; i <=N; i++) {
			parent[i] = i;
		}
	}
	
	static int find(int a) {
		if(parent[a] == a)
			return a;
		return parent[a] = find(parent[a]);
	}
	
	static void union(int a, int b) {
		int aroot = find(a);
		int broot = find(b);
		if(aroot < broot)
			parent[broot] = aroot;
		else 
			parent[aroot] = broot;
	}
	
	static class Edge{
		int s, e;
		double v;
		Edge(int s, int e, double v){
			this.s = s;
			this.e = e;
			this.v = v;
		}
	}
}
